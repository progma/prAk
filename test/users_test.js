// Generated by CoffeeScript 1.3.3
(function() {
  var db, errors, should, users;

  users = require('../progma/users');

  errors = require('../progma/errors');

  db = require('../progma/mongo').db;

  should = require('should');

  describe('Users', function() {
    beforeEach(function(done) {
      return db.dropDatabase(function(err) {
        if (err != null) {
          done(err);
        }
        return users.createUser('john@example.com', 'John Doe', 'hunter2', 'john@example.com', function(err, user) {
          return users.enrollUserInCourse(user, 'course1', function(err) {
            return users.enrollUserInCourse(user, 'course2', function(err) {
              return done(err);
            });
          });
        });
      });
    });
    describe('.getUser()', function() {
      it('should not find the user', function(done) {
        return users.getUser('test@example.com', function(err, user) {
          should.exist(err);
          err.should.be.an.instanceOf(errors.UserNotFoundError);
          should.not.exist(user);
          return done();
        });
      });
      return it('should find the user', function(done) {
        return users.getUser('john@example.com', function(err, user) {
          should.exist(user);
          return done(err);
        });
      });
    });
    describe('.createUser()', function() {
      it('should create new user', function(done) {
        return users.createUser('doe@example.com', 'John Doe', 'hunter2', 'john@example.com', function(err, user) {
          should.exist(user);
          user.should.have.property('id', 'doe@example.com');
          user.should.have.property('displayName', 'John Doe');
          user.should.have.property('email', 'john@example.com');
          user.should.have.property('courses')["with"].lengthOf(0);
          user.should.have.property('achievements')["with"].lengthOf(0);
          user.should.have.property('salt');
          user.should.have.property('password');
          users.hashPassword(user.salt, 'hunter2').should.eql(user.password);
          return done(err);
        });
      });
      return it('should return an error when the user already exists', function(done) {
        return users.createUser('john@example.com', 'John Doe', 'hunter2', 'john@example.com', function(err, user) {
          err.should.be.an.instanceOf(errors.UserAlreadyExistsError);
          should.not.exist(user);
          return done();
        });
      });
    });
    describe('.updateUser()', function() {
      return it('should update the user', function(done) {
        return users.getUser('john@example.com', function(err, user) {
          should.not.exist(err);
          should.exist(user);
          user.email = 'doe@example.com';
          return users.updateUser(user, function(err) {
            return users.getUser('john@example.com', function(err, user) {
              should.exist(user);
              user.should.have.property('email', 'doe@example.com');
              return done(err);
            });
          });
        });
      });
    });
    describe('.userExists', function() {
      it('should return false when the user does not exist', function(done) {
        return users.userExists('test@example.com', function(err, exists) {
          exists.should.be["false"];
          return done(err);
        });
      });
      return it('should return true when the user exists', function(done) {
        return users.userExists('john@example.com', function(err, exists) {
          exists.should.be["true"];
          return done(err);
        });
      });
    });
    describe('.deleteUser', function() {
      return it('should delete the user from db', function(done) {
        return users.getUser('john@example.com', function(err, user) {
          return users.deleteUser(user, function(err) {
            should.not.exist(err);
            return users.getUser('john@example.com', function(err, user) {
              err.should.be.an.instanceOf(errors.UserNotFoundError);
              return done();
            });
          });
        });
      });
    });
    describe('.checkPassword', function() {
      it('should return false when the password is incorrect', function(done) {
        return users.checkPassword('john@example.com', 'wrong password', function(err, correct) {
          correct.should.be["false"];
          return done(err);
        });
      });
      return it('should return true when the password is correct', function(done) {
        return users.checkPassword('john@example.com', 'hunter2', function(err, correct) {
          correct.should.be["true"];
          return done(err);
        });
      });
    });
    describe('.enrollUserInCourse', function() {
      it('should add the new course to list of courses', function(done) {
        return users.getUser('john@example.com', function(err, user) {
          return users.enrollUserInCourse(user, 'course3', function(err) {
            should.not.exist(err);
            return users.getUser('john@example.com', function(err, user) {
              user.should.have.property('courses')["with"].lengthOf(3);
              user.courses.should.include('course1');
              user.courses.should.include('course2');
              user.courses.should.include('course3');
              return done(err);
            });
          });
        });
      });
      return it('should return an error when the user is already enrolled in course', function(done) {
        return users.getUser('john@example.com', function(err, user) {
          return users.enrollUserInCourse(user, 'course1', function(err, user) {
            user.should.have.property('courses')["with"].lengthOf(2);
            err.should.be.an.instanceOf(errors.UserAlreadyEnrolledError);
            return done();
          });
        });
      });
    });
    describe('.dropCourse', function() {
      it('should remove the course from list of courses', function(done) {
        return users.getUser('john@example.com', function(err, user) {
          return users.dropCourse(user, 'course1', function(err, user) {
            user.should.have.property('courses')["with"].lengthOf(1);
            user.courses.should.include('course2');
            return done(err);
          });
        });
      });
      return it('should return an error when the user is not enrolled in course', function(done) {
        return users.getUser('john@example.com', function(err, user) {
          return users.dropCourse(user, 'course00', function(err, user) {
            user.should.have.property('courses')["with"].lengthOf(2);
            err.should.be.an.instanceOf(errors.UserNotEnrolledError);
            return done();
          });
        });
      });
    });
    return describe('.listCourses', function() {
      return it('should return a list of courses', function(done) {
        return users.getUser('john@example.com', function(err, user) {
          return users.listCourses(user, function(err, courses) {
            courses.should.have.length(2);
            courses.should.include('course1');
            courses.should.include('course2');
            return done(err);
          });
        });
      });
    });
  });

}).call(this);
