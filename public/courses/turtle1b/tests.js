// Generated by CoffeeScript 1.3.3
(function() {
  var assert, check, ex, qc, run, sequencesEqual, _ref, _ref1, _ref2;

  qc = (_ref = this.quickCheck) != null ? _ref : require('./quickcheck');

  ex = (_ref1 = this.examine) != null ? _ref1 : require('./examine');

  assert = function(result) {
    if (result !== true) {
      throw result.errObj;
    }
  };

  run = function(code, call) {
    return turtle2d.run(code + "\n\n" + call, {
      shadow: false,
      draw: false
    });
  };

  sequencesEqual = function(code, expected, call) {
    var exp, expSeq, res, resSeq;
    res = run(code, call);
    resSeq = turtle2d.sequences;
    exp = run(expected, call);
    expSeq = turtle2d.sequences;
    assert(res);
    return graph.sequencesEqual(resSeq, expSeq);
  };

  check = function(obj) {
    var res;
    res = ex.test(obj);
    if (obj.afterwards != null) {
      turtle2d.run(obj.afterwards, {
        shadow: false
      });
    }
    return res;
  };

  this.tests = (_ref2 = this.tests) != null ? _ref2 : {};

  this.tests.turtle1 = {
    nuhelnik: function(code, expected) {
      return check({
        name: "nuhelnik",
        property: function(n, delka) {
          return sequencesEqual(code, expected, "nuhelnik(" + n + "," + delka + ");");
        },
        quickCheck: [qc.arbChooseInt(3, 20), qc.arbChooseInt(5, 1000)],
        afterwards: "" + code + "\n\nnuhelnik(10, 30);",
        maxSuccess: 10
      });
    },
    nuhelnikExpected: function(expected, inSlide) {
      if (inSlide == null) {
        inSlide = true;
      }
      return turtle2d.run("" + expected + "\n\nnuhelnik(5, 100);", {
        shadow: inSlide,
        animate: inSlide
      });
    }
  };

}).call(this);
